AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Unified document processor using AWS Textract for PDF text extraction 
  and Amazon Bedrock for LLM processing. Replaces the previous containerized 
  doc-reader and separate llm-processor services.

Parameters:
  ProjectName:
    Type: String
    Default: document-processor
  FoundationalModelId:
    Type: String
    Default: anthropic.claude-3-5-haiku-20241022-v1:0
    Description: Amazon Bedrock model ID for LLM processing

Resources:
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-StepFunctionsExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ProjectName}-TextractPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - textract:AnalyzeDocument
                  - textract:DetectDocumentText
                Resource: "*"
        - PolicyName: !Sub "${ProjectName}-BedrockInvokePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${FoundationalModelId}"
        - PolicyName: !Sub "${ProjectName}-S3AccessPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub
                  - "arn:aws:s3:::${InputBucket}/*"
                  - InputBucket: !ImportValue finance-doc-core-infra-documents-bucket
        - PolicyName: !Sub "${ProjectName}-LambdaPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt RequestOcrFunction.Outputs.RequestOcrFunctionArn
        - PolicyName: !Sub "${ProjectName}-CloudWatchLogsPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  DocumentProcessorStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${ProjectName}-StateMachine"
      Role: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionUri: document-processor-state-machine.yaml
      DefinitionSubstitutions:
        RequestOcrFunctionArn: !GetAtt RequestOcrFunction.Outputs.RequestOcrFunctionArn
        FoundationalModelId: !Ref FoundationalModelId

  DocumentProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-processing-dlq"
      MessageRetentionPeriod: 1209600  # 14 days

  EventBridgeStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-EventBridgeStepFunctionsRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt DocumentProcessorStateMachine.Arn
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt DocumentProcessingDLQ.Arn

  DocumentUploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-DocumentUploadRule"
      Description: "Trigger document processor when PDFs are uploaded to input bucket"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !ImportValue finance-doc-core-infra-documents-bucket
          object:
            key:
              - wildcard: "userId/documents/*/*.pdf"
      State: ENABLED
      Targets:
        - Id: "DocumentProcessorTarget"
          Arn: !GetAtt DocumentProcessorStateMachine.Arn
          RoleArn: !GetAtt EventBridgeStepFunctionsRole.Arn
          DeadLetterConfig:
            Arn: !GetAtt DocumentProcessingDLQ.Arn
          RetryPolicy:
             MaximumRetryAttempts: 0
          InputTransformer:
            InputPathsMap:
              bucket: "$.detail.bucket.name"
              key: "$.detail.object.key"
            InputTemplate: !Sub |
              {
                "bucket": "<bucket>",
                "key": "<key>"
              }

  RequestOcrFunction:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./request-ocr/template.yaml

Outputs:
  StateMachineArn:
    Description: "The ARN of the Step Functions State Machine"
    Value: !GetAtt DocumentProcessorStateMachine.Arn
    Export:
      Name: !Sub '${ProjectName}-state-machine-arn'

  DocumentProcessingDLQUrl:
    Description: "URL of the Dead Letter Queue for failed document processing"
    Value: !Ref DocumentProcessingDLQ
    Export:
      Name: !Sub "${ProjectName}-dlq-url"

  DocumentProcessingDLQArn:
    Description: "ARN of the Dead Letter Queue for failed document processing"  
    Value: !GetAtt DocumentProcessingDLQ.Arn
    Export:
      Name: !Sub "${ProjectName}-dlq-arn"
