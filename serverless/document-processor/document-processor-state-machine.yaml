QueryLanguage: JSONata
StartAt: Set Input Variables
States:
  Set Input Variables:
    Type: Pass
    Next: Request Mistral OCR for Markdown
    Assign:
      bucket: '{% $states.input.bucket %}'
      key: '{% $states.input.key %}'
  Request Mistral OCR for Markdown:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Output: '{% $states.result.Payload %}'
    Arguments:
      FunctionName: ${RequestOcrFunctionArn}
      Payload:
        bucket: '{% $bucket %}'
        key: '{% $key %}'
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.TooManyRequestsException
        IntervalSeconds: 1
        MaxAttempts: 3
        BackoffRate: 2
        JitterStrategy: FULL
    Next: Store MD File
    Assign:
      extractedText: '{% $states.result.Payload.extractedText %}'
  Store MD File:
    Type: Task
    Arguments:
      Body: '{% $extractedText %}'
      Bucket: '{% $bucket %}'
      Key: '{% $replace($key, ''.pdf'', ''.md'') %}'
    Resource: arn:aws:states:::aws-sdk:s3:putObject
    Next: Bedrock InvokeModel
  Bedrock InvokeModel:
    Type: Task
    Resource: arn:aws:states:::bedrock:invokeModel
    Arguments:
      ModelId: >-
        arn:aws:bedrock:us-west-2::foundation-model/${FoundationalModelId}
      Body:
        anthropic_version: bedrock-2023-05-31
        max_tokens: 4096
        temperature: 0
        messages:
          - role: user
            content:
              - type: text
                text: >-
                  {% 'You are a financial data extraction assistant. Your task
                  is to analyze bank statements provided as extracted text from
                  a PDF document and extract all transactions into a structured
                  JSON format.


                  ## Instructions

                  1. Carefully read the provided bank statement text that was
                  extracted from a PDF

                  2. Extract all transactions with their details

                  3. Return the data in the specified JSON format

                  4. If any information is not available in the statement, use
                  "N/A" as the value

                  5. Ensure all monetary values are returned as floats with 2
                  decimal points (not strings). This includes cero cents (.00) Example: 20000 should be 20000.00

                  6. Dates should be in ISO 8601 format (YYYY-MM-DD)

                  7. You must only use the categories from the list of available
                  categories. If there is no category suitable for a given
                  transaction, you must use "Otros"

                  8. The output should be in JSON format only and nothing else

                  ## Available Categories:

                  - Restaurantes - Despensa - Ropa - Cuidado Personal -
                  Medicamentos - Gasolina - Impuestos - Comisiones Bancarias -
                  Intereses Bancarios - Financiamiento Automotriz - Hipoteca -
                  Tranferencia Bancaria - Servicios Digitales - Sueldos y
                  Salarios - Pago de Tarjeta de Credito - Otros

                  ## Expected JSON Output Format

                  { 
                    "accountInfo": {
                      "accountHolder": <string or N/A>,
                      "bankName": <string or N/A>,
                      "statementPeriod": {
                        "startDate": <YYYY-MM-DD or N/A>,
                        "endDate": <YYYY-MM-DD or N/A>"
                      }
                    },
                    "transactions": [
                      {
                        "date": <YYYY-MM-DD>,
                        "description": <string or N/A>,
                        "amount": <float/currency>,
                        "type": <expense or income>,
                        "category": <string or N/A>
                      }
                    ],
                    "summary": {
                      "totalIncome": <float/currency>,
                      "totalExpenses": <float/currency>,
                      "transactionCount": <integer>
                    }
                  }

                  ## Additional Guidelines:

                  - Handle various date formats and convert them to ISO 8601

                  - Remove currency symbols and convert to floats with 2 decimal
                  points values

                  - If the bank statement has additional columns not in the
                  expected format, extract what is available

                  - If transactions are not in a table format, extract them from
                  the text

                  - Validate that the calculated totals match the statement if
                  possible

                  - Some bank staments transactions start from: "Detalle de Movimientos", "Detalle de Operaciones", "Movimientos", "Transacciones Bancarias", "Balance Inicial", "Balance".

                  - Sometimes the transactions table divided with text due to a page separation. Keep this in mind to not lose transactions.

                  ## Bank Statement Text to Analyze: 

                  ' & $extractedText %}
    Next: Convert Output to JSON
    Retry:
      - ErrorEquals:
          - States.AWS.Bedrock.ThrottlingException
          - States.AWS.Bedrock.ServiceQuotaExceededException
        IntervalSeconds: 5
        MaxAttempts: 3
        BackoffRate: 2
  Convert Output to JSON:
    Type: Pass
    Assign:
      processedContent: '{% $parse($states.input.Body.content[0].text) %}'
      processingMetadata:
        bucket: '{% $bucket %}'
        key: '{% $key %}'
        modelId: anthropic.claude-3-5-haiku-20241022-v1:0
        timestamp: '{% $now() %}'
    End: true
