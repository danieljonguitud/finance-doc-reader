QueryLanguage: JSONata
StartAt: Set Input Variables
States:
  Set Input Variables:
    Type: Pass
    Next: GetObject
    Assign:
      inputBucket: "{% $states.input.inputBucket %}"
      inputKey: "{% $states.input.inputKey %}"
      outputBucket: "{% $states.input.outputBucket %}"
      outputKey: "{% $states.input.outputKey %}"
  GetObject:
    Type: Task
    Arguments:
      Bucket: "{% $inputBucket %}"
      Key: "{% $.inputKey %}"
    Resource: arn:aws:states:::aws-sdk:s3:getObject
    Next: Bedrock InvokeModel
    Retry:
      - ErrorEquals: ["States.AWS.S3.NoSuchKey", "States.AWS.S3.NoSuchBucket"]
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 2.0
    Catch:
      - ErrorEquals: ["States.ALL"]
        Next: HandleError
  Bedrock InvokeModel:
    Type: Task
    Resource: arn:aws:states:::bedrock:invokeModel
    Arguments:
      ModelId: >-
        arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0
      Body:
        anthropic_version: bedrock-2023-05-31
        max_tokens: 4096
        temperature: 0
        messages:
          - role: user
            content:
              - type: text
                text: >-
                  {% 'You are a financial data extraction assistant. Your task
                  is to analyze bank statements provided in Markdown format and
                  extract all transactions into a structured JSON format.


                  ## Instructions

                  1. Carefully read the provided bank statement in Markdown
                  format

                  2. Extract all transactions with their details

                  3. Return the data in the specified JSON format

                  4. If any information is not available in the statement, use
                  "N/A" as the value

                  5. Ensure all monetary values are returned as floats with 2 decimal points (not
                  strings)

                  6. Dates should be in ISO 8601 format (YYYY-MM-DD)

                  7. You must only used the categories from the list of available categories. If there is no category suitable for a given transaction, you must use "Otros"

                  8. The output should be the JSON only and nothing else

                  ## Available Catergories:
                  
                  - Restaurantes
                  - Despensa
                  - Ropa
                  - Cuidado Personal
                  - Medicamentos
                  - Gasolina
                  - Impuestos
                  - Comisiones Bancarias
                  - Intereses Bancarios
                  - Financiamiento Automotriz
                  - Hipoteca
                  - Tranferencia Bancaria
                  - Servicios Digitales
                  - Sueldos y Salarios
                  - Pago de Tarjeta de Credito

                  ## Expected JSON Output Format

                  ```json

                  { 
                    "accountInfo": {
                      "accountNumber": <string or N/A>,
                      "accountHolder": <string or N/A>,
                      "bankName": <string or N/A>,
                      "statementPeriod": {
                        "startDate": <YYYY-MM-DD or N/A>,
                        "endDate": <YYYY-MM-DD or N/A>"
                      }
                    },
                    "transactions": [
                      {
                        "date": <YYYY-MM-DD>,
                        "description": <string or N/A>,
                        "amount": <float/currency>,
                        "type": <expense or income>,
                        "category": <string or N/A>
                      }
                    ],
                    "summary": {
                      "totalIncome": <float/currency>,
                      "totalExepenses": <float/currency>,
                      "transactionCount": <integer>
                    }
                  }

                  ```

                  ## Additional Guidelines:

                  - Handle various date formats and convert them to ISO 8601

                  - Remove currency symbols and convert to floats with 2 decimal points values

                  - If the bank statement has additional columns not in the
                  expected format, extract what it is available

                  - If transactions are not in a table format, extract them from
                  the text

                  - Validate that the calculated totals match the statement if
                  possible


                  ## Bank Statement to Analyze: ' & $states.input.Body %}
    Next: Convert output to JSON
    Retry:
      - ErrorEquals: ["States.AWS.Bedrock.ThrottlingException", "States.AWS.Bedrock.ServiceQuotaExceededException"]
        IntervalSeconds: 5
        MaxAttempts: 3
        BackoffRate: 2.0
    Catch:
      - ErrorEquals: ["States.ALL"]
        Next: HandleError
  Convert output to JSON:
    Type: Pass
    Next: Processing Complete
    Assign:
      processedContent: '{% $parse($states.input.Body.content[0].text) %}'
      inputMetadata:
        inputBucket: "{% $.inputBucket %}"
        inputKey: "{% $.inputKey %}"
        modelId: "anthropic.claude-3-5-haiku-20241022-v1:0"
        timestamp: "{% $now() %}"
      outputBucket: "{% $.outputBucket %}"
      outputKey: "{% $.outputKey %}"
  Processing Complete:
    Type: Pass
    End: true
    Assign:
      status: "success"
      message: "Document processed successfully"
      outputLocation: "{% 's3://' & $.outputBucket & '/' & $.outputKey %}"
  HandleError:
    Type: Pass
    End: true
    Assign:
      status: "error"
      error: "{% $states.context.error %}"
      errorMessage: "{% $states.context.errorMessage %}"
