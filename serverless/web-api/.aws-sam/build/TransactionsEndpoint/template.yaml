AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Transactions API endpoint with Lambda integration
Parameters:
  ProjectName:
    Type: String
  ApiGatewayExecutionRoleArn:
    Type: String
  WebApi:
    Type: String
  V1Resource:
    Type: String
  CognitoAuthorizerId:
    Type: String
Resources:
  TransactionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: WebApi
      ParentId:
        Ref: V1Resource
      PathPart: transactions
  TransactionsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: WebApi
      ResourceId:
        Ref: TransactionsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizerId
      RequestParameters:
        method.request.querystring.fields: false
        method.request.querystring.limit: false
        method.request.querystring.offset: false
        method.request.querystring.category: false
        method.request.querystring.transaction_type: false
        method.request.querystring.start_date: false
        method.request.querystring.end_date: false
        method.request.querystring.orderBy: false
        method.request.querystring.orderDirection: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn:
              Fn::ImportValue: db-management-rds-data-function-arn
        Credentials:
          Ref: ApiGatewayExecutionRoleArn
        RequestTemplates:
          application/json: "#set($userId = $context.authorizer.claims.sub)\n#set($fields\
            \ = $input.params('fields'))\n#set($limit = $input.params('limit'))\n\
            #set($offset = $input.params('offset'))\n#set($category = $input.params('category'))\n\
            #set($transactionType = $input.params('transaction_type'))\n#set($startDate\
            \ = $input.params('start_date'))\n#set($endDate = $input.params('end_date'))\n\
            #set($orderBy = $input.params('order_by'))\n#set($orderDirection = $input.params('order_direction'))\n\
            \n#if(!$limit || $limit == \"\")\n  #set($limit = 20)\n#end\n\n#if(!$offset\
            \ || $offset == \"\")\n  #set($offset = 0)\n#end\n\n#if(!$orderBy || $orderBy\
            \ == \"\")\n  #set($orderBy = \"created_at\")\n#end\n\n#if(!$orderDirection\
            \ || $orderDirection == \"\")\n  #set($orderDirection = \"DESC\")\n#end\n\
            \n## Handle dynamic fields\n#if(!$fields || $fields == \"\")\n  #set($selectFields\
            \ = \"id\")\n#else\n  #set($requestedFields = $fields.split(\",\"))\n\
            \  #set($selectFields = $requestedFields.get(0).trim())\n  #foreach($field\
            \ in $requestedFields)\n    #if($foreach.index > 0)\n      #set($selectFields\
            \ = \"$selectFields, $field.trim()\")\n    #end\n  #end\n#end\n\n#set($whereConditions\
            \ = [])\n\n## Add user_id filter (always required) - cast string to UUID\n\
            #set($dummy = $whereConditions.add(\"user_id = CAST(:userId AS uuid)\"\
            ))\n\n## Add optional filters\n#if($category != \"\")\n  #set($dummy =\
            \ $whereConditions.add(\"category = :category\"))\n#end\n\n#if($transactionType\
            \ != \"\")\n  #set($dummy = $whereConditions.add(\"transaction_type =\
            \ :transactionType\"))\n#end\n\n#if($startDate != \"\")\n#set($dummy =\
            \ $whereConditions.add(\"transaction_date >= :startDate::date\"))\n#end\n\
            \n#if($endDate != \"\")\n#set($dummy = $whereConditions.add(\"transaction_date\
            \ <= :endDate::date\"))\n#end\n\n## Build WHERE clause\n#set($whereClause\
            \ = \"\")\n#foreach($condition in $whereConditions)\n  #if($foreach.index\
            \ == 0)\n    #set($whereClause = \"WHERE $condition\")\n  #else\n    #set($whereClause\
            \ = \"$whereClause AND $condition\")\n  #end\n#end\n\n{\n  \"operation\"\
            : \"query\",\n  \"sql\": \"SELECT $selectFields FROM transactions $whereClause\
            \ ORDER BY $orderBy $orderDirection, id DESC LIMIT :limit OFFSET :offset\"\
            ,\n  \"parameters\": [\n    { \n      \"name\": \"userId\",\n      \"\
            value\": {\n        \"stringValue\": \"$userId\"\n      }\n    },\n  \
            \  #if($category != \"\")\n    { \n      \"name\": \"category\",\n   \
            \   \"value\": {\n        \"stringValue\": \"$category\"\n      }\n  \
            \  },\n    #end\n    #if($transactionType != \"\")\n    { \n      \"name\"\
            : \"transactionType\",\n      \"value\": {\n        \"stringValue\": \"\
            $transactionType\"\n      }\n    },\n    #end\n    #if($startDate != \"\
            \")\n    { \n      \"name\": \"startDate\",\n      \"value\": {\n    \
            \    \"stringValue\": \"$startDate\"\n      }\n    },\n    #end\n    #if($endDate\
            \ != \"\")\n    { \n      \"name\": \"endDate\",\n      \"value\": {\n\
            \        \"stringValue\": \"$endDate\"\n      }\n    },\n    #end\n  \
            \  { \n      \"name\": \"limit\",\n      \"value\": {\n        \"longValue\"\
            : $limit\n      }\n    },\n    { \n      \"name\": \"offset\",\n     \
            \ \"value\": {\n        \"longValue\": $offset\n      }\n    }\n  ]\n\
            }\n"
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: "#set($records = $input.path('$.records'))\n#set($total\
              \ = $input.path('$.total'))\n#set($limit = $input.params('limit'))\n\
              #set($offset = $input.params('offset'))\n#set($orderBy = $input.params('order_by'))\n\
              #set($orderDirection = $input.params('order_direction'))\n\n#if(!$limit\
              \ || $limit == \"\")\n  #set($limit = 20)\n#end\n\n#if(!$offset || $offset\
              \ == \"\")\n  #set($offset = 0)\n#end\n\n#set($context.requestOverride.header.x-custom-order-by\
              \ = $orderBy)\n#set($context.requestOverride.header.x-custom-order-direction\
              \ = $orderDirection)\n{\n  \"data\": $input.json('$.records'),\n  \"\
              pagination\": {\n    \"limit\": $limit,\n    \"offset\": $offset,\n\
              \    \"count\": #if($records)$records.size()#else 0#end,\n    \"total\"\
              : #if($total)$total#else 0#end\n  }\n}\n"
        - StatusCode: 400
          SelectionPattern: .*400.*
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: "#set($defaultMessage = \"Invalid query parameters or\
              \ malformed request\")\n#set($errorMessage = $input.path('$.errorMessage'))\n\
              {\n  \"error\": \"Bad Request\",\n  \"message\": #if($errorMessage)\"\
              $errorMessage\"#else\"$defaultMessage\"#end\n}\n"
        - StatusCode: 503
          SelectionPattern: .*503.*
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: "#set($defaultMessage = \"Database is temporarily unavailable,\
              \ please retry in a few moments\")\n#set($errorMessage = $input.path('$.errorMessage'))\n\
              {\n  \"error\": \"Service Unavailable\",\n  \"message\": #if($errorMessage)\"\
              $errorMessage\"#else\"$defaultMessage\"#end\n}\n"
        - StatusCode: 500
          SelectionPattern: .*500.*
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: "#set($defaultMessage = \"An unexpected error occurred\"\
              )\n#set($errorMessage = $input.path('$.errorMessage'))\n{\n  \"error\"\
              : \"Internal Server Error\",\n  \"message\": #if($errorMessage)\"$errorMessage\"\
              #else\"$defaultMessage\"#end\n}\n"
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
        ResponseModels:
          application/json: Empty
      - StatusCode: 400
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
        ResponseModels:
          application/json: Empty
      - StatusCode: 503
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
        ResponseModels:
          application/json: Empty
      - StatusCode: 500
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
        ResponseModels:
          application/json: Empty
  TransactionsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: WebApi
      ResourceId:
        Ref: TransactionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  TransactionsSummaryEndpoint:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        ProjectName:
          Ref: ProjectName
        ApiGatewayExecutionRoleArn:
          Ref: ApiGatewayExecutionRoleArn
        WebApi:
          Ref: WebApi
        TransactionsResource:
          Ref: TransactionsResource
        CognitoAuthorizerId:
          Ref: CognitoAuthorizerId
      Location: TransactionsSummaryEndpoint/template.yaml
    Metadata:
      SamResourceId: TransactionsSummaryEndpoint
