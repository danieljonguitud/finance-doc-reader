AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Deploys the necessary infrastructure for the doc-reader container,
  enabling it to be run as a Fargate task orchestrated by Step Functions.

Parameters:
  ProjectName:
    Type: String
    Default: doc-reader

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-TaskRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ProjectName}-S3AccessPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 
                  - "arn:aws:s3:::${InputBucket}"
                  - InputBucket: !ImportValue finance-doc-core-infra-input-bucket
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub
                  - "arn:aws:s3:::${InputBucket}/*"
                  - InputBucket: !ImportValue finance-doc-core-infra-input-bucket

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ProjectName
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE

  # Role for ECS agent to pull image and write logs
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-TaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}"
      RetentionInDays: 30

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ProjectName
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: "4096" # 4 vCPU
      Memory: "16384" # 16 GB - Marker can be memory intensive
      RuntimePlatform:
        CpuArchitecture: ARM64
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref ProjectName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          # Environment variables are provided at runtime by the Step Function
          # The entrypoint.sh script expects INPUT_S3_URI and OUTPUT_S3_URI_PREFIX
          Environment: []

  DocReaderEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: doc-reader
      Description: "Custom event bus for doc-reader service events"
      Tags:
        - Key: Service
          Value: doc-reader
        - Key: Purpose
          Value: event-driven-processing

  DocumentProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-document-processing-dlq"

  EventBridgeEcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-EventBridgeEcsTaskRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RunEcsTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Ref TaskDefinition
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt TaskRole.Arn
                  - !GetAtt TaskExecutionRole.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt DocumentProcessingDLQ.Arn

  DocumentUploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-DocumentUploadRule"
      Description: "Trigger doc-reader ECS task when PDFs are uploaded to input bucket"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !ImportValue finance-doc-core-infra-input-bucket
          object:
            key:
              - prefix: "userId/documents/"
              - suffix: ".pdf"
      State: ENABLED
      Targets:
        - Id: "DocReaderEcsTaskTarget"
          Arn: !Sub
            - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}"
            - ClusterName: !ImportValue finance-doc-core-infra-ecs-cluster
          RoleArn: !GetAtt EventBridgeEcsTaskRole.Arn
          DeadLetterConfig:
            Arn: !GetAtt DocumentProcessingDLQ.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref TaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                Subnets:
                  - subnet-0e6226143b6413cbe # Replace with actual subnet
            TaskCount: 1
          InputTransformer:
            InputPathsMap:
              bucket: "$.detail.bucket.name"
              s3Key: "$.detail.object.key"
            InputTemplate: !Sub |
              {
                "containerOverrides": [
                  {
                    "name": "${ProjectName}",
                    "environment": [
                      {
                        "name": "S3_URI",
                        "value": "s3://<bucket>/<s3Key>"
                      }
                    ]
                  }
                ]
              }

Outputs:
  EcrRepositoryUri:
    Description: "The URI of the ECR repository for the doc-reader image"
    Value: !GetAtt EcrRepository.RepositoryUri
  TaskDefinitionArn:
    Description: "The ARN of the ECS Task Definition"
    Value: !Ref TaskDefinition
  DocReaderEventBusName:
    Description: "The name of the custom event bus for doc-reader events"
    Value: !Ref DocReaderEventBus
    Export:
      Name: doc-reader-event-bus-name
  DocReaderEventBusArn:
    Description: "The ARN of the custom event bus for doc-reader events"
    Value: !GetAtt DocReaderEventBus.Arn
    Export:
      Name: doc-reader-event-bus-arn
  DocumentProcessingDLQUrl:
    Description: "URL of the Dead Letter Queue for failed document processing events"
    Value: !Ref DocumentProcessingDLQ
    Export:
      Name: !Sub "${ProjectName}-dlq-url"
  DocumentProcessingDLQArn:
    Description: "ARN of the Dead Letter Queue for failed document processing events"  
    Value: !GetAtt DocumentProcessingDLQ.Arn
    Export:
      Name: !Sub "${ProjectName}-dlq-arn"
