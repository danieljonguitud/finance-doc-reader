AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Deploys the core infrastructure for the finance-doc-reader

Parameters:
  ProjectName:
    Type: String
    Default: finance-doc-core-infra
  DatabaseName:
    Type: String
    Default: finance_docs
    Description: Name of the PostgreSQL database

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-2"

  # Public subnet for bastion (needs internet access for SSM endpoints)
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-subnet"

  # Internet Gateway for bastion access to SSM endpoints
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-igw"

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Route table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-rt"

  # Route to Internet Gateway
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate public subnet with public route table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora PostgreSQL cluster
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-db-subnet-group"

  # IAM role for Session Manager bastion
  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-bastion-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-bastion-role"

  # Instance profile for bastion
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${ProjectName}-bastion-profile"
      Roles:
        - !Ref BastionRole

  # Security group for bastion (outbound only - no circular references)
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-bastion-sg"
      GroupDescription: Security group for Session Manager bastion
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for Session Manager endpoints
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-bastion-sg"

  # Security group for Aurora (no circular references)
  AuroraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-aurora-sg"
      GroupDescription: Security group for Aurora PostgreSQL cluster
      VpcId: !Ref VPC
      # No ingress rules initially - added separately to avoid circular dependency
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-aurora-sg"

  # t4g.small bastion instance for Session Manager port forwarding (FREE tier until Dec 2025)
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t4g.small
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64}}'
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      IamInstanceProfile: !Ref BastionInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          # SSM agent is pre-installed on Amazon Linux 2023
          # Ensure SSM agent is running
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-bastion"
        - Key: Environment
          Value: !Ref ProjectName

  # Separate security group rules to avoid circular dependencies
  BastionToAuroraEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      DestinationSecurityGroupId: !Ref AuroraSecurityGroup
      Description: Aurora PostgreSQL (port 3306) from bastion to Aurora

  AuroraFromBastionIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AuroraSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref BastionSecurityGroup
      Description: Aurora PostgreSQL (port 3306) from bastion only

  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-documents-bucket-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub "${ProjectName}-postgres-cluster"
      Engine: aurora-postgresql
      EngineVersion: 16.6
      DatabaseName: !Ref DatabaseName
      MasterUsername: finance_docs
      ManageMasterUserPassword: true
      EnableHttpEndpoint: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref AuroraSecurityGroup
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0
        MaxCapacity: 1
        SecondsUntilAutoPause: 300
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-postgres-cluster"

  AuroraInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${ProjectName}-postgres-instance"
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-postgres-instance"

Outputs:
  DocumentsBucket:
    Description: "Name of the S3 bucket for users documents"
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub '${ProjectName}-documents-bucket'
  
  AuroraClusterArn:
    Description: "ARN of the Aurora PostgreSQL cluster for Data API access"
    Value: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraCluster}"
    Export:
      Name: !Sub '${ProjectName}-aurora-cluster-arn'
      
  AuroraClusterEndpoint:
    Description: "Aurora cluster endpoint"
    Value: !GetAtt AuroraCluster.Endpoint.Address
    Export:
      Name: !Sub '${ProjectName}-aurora-cluster-endpoint'
      
  DatabaseSecretArn:
    Description: "ARN of the database master user secret"
    Value: !GetAtt AuroraCluster.MasterUserSecret.SecretArn
    Export:
      Name: !Sub '${ProjectName}-database-secret-arn'
      
  DatabaseName:
    Description: "Name of the PostgreSQL database"
    Value: !Ref DatabaseName
    Export:
      Name: !Sub '${ProjectName}-database-name'
      
  BastionInstanceId:
    Description: "Instance ID of the Session Manager bastion for database tunneling"
    Value: !Ref BastionInstance
    Export:
      Name: !Sub '${ProjectName}-bastion-instance-id'
